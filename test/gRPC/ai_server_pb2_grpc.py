# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ai_server_pb2 as ai__server__pb2


class OCRStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProgress = channel.unary_unary(
                '/ai_server.OCR/GetProgress',
                request_serializer=ai__server__pb2.SendProgress.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyGetProgress.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/ai_server.OCR/GetResult',
                request_serializer=ai__server__pb2.SendResult.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyGetResult.FromString,
                )
        self.RunModel = channel.unary_unary(
                '/ai_server.OCR/RunModel',
                request_serializer=ai__server__pb2.RequestRunModel.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyRunModel.FromString,
                )


class OCRServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProgress,
                    request_deserializer=ai__server__pb2.SendProgress.FromString,
                    response_serializer=ai__server__pb2.ReplyGetProgress.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=ai__server__pb2.SendResult.FromString,
                    response_serializer=ai__server__pb2.ReplyGetResult.SerializeToString,
            ),
            'RunModel': grpc.unary_unary_rpc_method_handler(
                    servicer.RunModel,
                    request_deserializer=ai__server__pb2.RequestRunModel.FromString,
                    response_serializer=ai__server__pb2.ReplyRunModel.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_server.OCR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OCR(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.OCR/GetProgress',
            ai__server__pb2.SendProgress.SerializeToString,
            ai__server__pb2.ReplyGetProgress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.OCR/GetResult',
            ai__server__pb2.SendResult.SerializeToString,
            ai__server__pb2.ReplyGetResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.OCR/RunModel',
            ai__server__pb2.RequestRunModel.SerializeToString,
            ai__server__pb2.ReplyRunModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StyleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProgress = channel.unary_unary(
                '/ai_server.Style/GetProgress',
                request_serializer=ai__server__pb2.SendProgress.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyGetProgress.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/ai_server.Style/GetResult',
                request_serializer=ai__server__pb2.SendResult.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyGetResult.FromString,
                )
        self.RunModel = channel.unary_unary(
                '/ai_server.Style/RunModel',
                request_serializer=ai__server__pb2.RequestRunModel.SerializeToString,
                response_deserializer=ai__server__pb2.ReplyRunModel.FromString,
                )


class StyleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StyleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProgress,
                    request_deserializer=ai__server__pb2.SendProgress.FromString,
                    response_serializer=ai__server__pb2.ReplyGetProgress.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=ai__server__pb2.SendResult.FromString,
                    response_serializer=ai__server__pb2.ReplyGetResult.SerializeToString,
            ),
            'RunModel': grpc.unary_unary_rpc_method_handler(
                    servicer.RunModel,
                    request_deserializer=ai__server__pb2.RequestRunModel.FromString,
                    response_serializer=ai__server__pb2.ReplyRunModel.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_server.Style', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Style(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.Style/GetProgress',
            ai__server__pb2.SendProgress.SerializeToString,
            ai__server__pb2.ReplyGetProgress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.Style/GetResult',
            ai__server__pb2.SendResult.SerializeToString,
            ai__server__pb2.ReplyGetResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_server.Style/RunModel',
            ai__server__pb2.RequestRunModel.SerializeToString,
            ai__server__pb2.ReplyRunModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
